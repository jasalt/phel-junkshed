(ns js/next-pdo
  (:require phel\str)
  (:require phel\pdo)
  (:require phel\pdo\statement)
  )

;; PDO convenience functions separated from wp.phel for standalone use.
;; Partially inspired from seancorfield/next-jdbc, hence the name.

;; Requires phel-lang/phel-pdo
;; https://github.com/phel-lang/phel-pdo

;; TODO submit good parts to phel-lang/phel-pdo
;; TODO https://github.com/phel-lang/phel-pdo/issues/4

;;;; misc
(defn table-exists? [conn table-name]
  #_(when (php/-> wpdb (get_var (str "SHOW TABLES LIKE '" table-name "';"))) true)
  )

(defn drop-table! [conn table-name]
  #_(php/-> wpdb (query (str "DROP TABLE IF EXISTS " table-name))))

(defn create-table! [conn table-sql])

;;;; next-jdbc

(defn fetch-all [conn sql]
  (let [query (pdo/query conn sql)]
    (statement/fetch-all query)))

;; https://github.com/seancorfield/next-jdbc/blob/56bd2356ac542ff6c3667aec24cb0207dafe4e40/src/next/jdbc/sql.clj#L178
;; TODO allow passing optional id col as with next-jdbc (?)
(defn get-by-id [conn table id]
    (-> (pdo/prepare conn (str "SELECT * FROM " table " WHERE id = :id"))
        (statement/bind-value :id id)
        (statement/execute)
        (statement/fetch)))

;; TODO improve after next.jdbc,
;; - return map of generated keys (?)
;; - split into execute-one! (?)
(defn insert! "returns new id"
    [conn table m]
    (let [m-keys (keys m)
          column-names (str/join ", " (map name m-keys))
          placeholders (str/join ", " m-keys)
          stmt-sql (str "INSERT INTO " table " (" column-names ") "
                        "VALUES (" placeholders ")")
          stmt (pdo/prepare conn stmt-sql)]

      (dofor [[k v] :pairs m]
             (statement/bind-value stmt k v))

      (php/-> (stmt :stmt) (execute))
      (pdo/last-insert-id conn)))

(defn update!
  [conn table row-id m]
  (let [assignments
        (str/join ", " (map (fn [k] (str (name k) " = " k)) (keys m)))

        stmt-sql (str "UPDATE " table " "
                      "SET " assignments " "
                      "WHERE id = :id")
        stmt (pdo/prepare conn stmt-sql)]

    (statement/bind-value stmt :id row-id)
    (dofor [[k v] :pairs m]
           (statement/bind-value stmt k v))

    (php/-> (stmt :stmt) (execute))
    (php/-> (stmt :stmt) (rowCount))))
