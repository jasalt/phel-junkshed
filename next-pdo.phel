(ns js\next-pdo
  (:require phel\str)
  (:require phel\trace :refer [dbg])
  (:require phel\pdo)
  (:require phel\pdo\statement)
  (:use PDO))

;; PDO convenience functions separated from wp.phel for standalone use.
;; Partially inspired from seancorfield/next-jdbc, hence the name.

;; Requires phel-lang/phel-pdo
;; https://github.com/phel-lang/phel-pdo

;; TODO submit good parts to phel-lang/phel-pdo
;; TODO https://github.com/phel-lang/phel-pdo/issues/4

;;;; misc

(defn get-driver
  "Returns database driver used for the PDO connection"
  [conn]
  {:pre [(pdo/connection? conn)]}
  (php/-> (:pdo conn) (getAttribute (php/:: PDO ATTR_DRIVER_NAME))))

(defn table-exists? [conn table-name]
  {:pre [(pdo/connection? conn) (string? table-name)]}
  (when-not (= "sqlite" (get-driver conn))
    (throw (php/new \InvalidArgumentException "Only SQLite supported for now")))

  (let [stmt (pdo/prepare conn "SELECT * FROM sqlite_master WHERE type='table' AND name = ?")
        tables (-> stmt
                  (statement/execute [table-name])
                  (statement/fetch-all))]
    (not (empty? tables))))

(defn drop-table! [conn table-name]
  {:pre [(pdo/connection? conn) (string? table-name)]}
  (when-not (= "sqlite" (get-driver conn))
    (throw (php/new \InvalidArgumentException "Only SQLite supported for now")))

  (let [sql (str "DROP TABLE IF EXISTS `" table-name "`")]
    (pdo/exec conn sql)))

;;;; next-jdbc

(defn fetch-all [conn sql]
  (let [query (pdo/query conn sql)]
    (statement/fetch-all query)))

;; https://github.com/seancorfield/next-jdbc/blob/56bd2356ac542ff6c3667aec24cb0207dafe4e40/src/next/jdbc/sql.clj#L178
;; TODO allow passing optional id col as with next-jdbc (?)
(defn get-by-id [conn table id]
    (-> (pdo/prepare conn (str "SELECT * FROM " table " WHERE id = :id"))
        (statement/bind-value :id id)
        (statement/execute)
        (statement/fetch)))

;; TODO improve after next.jdbc,
;; - return map of generated keys (?)
;; - split into execute-one! (?)
(defn insert! "returns new id"
    [conn table m]
    (let [m-keys (keys m)
          column-names (str/join ", " (map name m-keys))
          placeholders (str/join ", " m-keys)
          stmt-sql (str "INSERT INTO " table " (" column-names ") "
                        "VALUES (" placeholders ")")
          stmt (pdo/prepare conn stmt-sql)]

      (dofor [[k v] :pairs m]
             (statement/bind-value stmt k v))

      (php/-> (stmt :stmt) (execute))
      (pdo/last-insert-id conn)))

(defn update!
  [conn table row-id m]
  (let [assignments
        (str/join ", " (map (fn [k] (str (name k) " = " k)) (keys m)))

        stmt-sql (str "UPDATE " table " "
                      "SET " assignments " "
                      "WHERE id = :id")
        stmt (pdo/prepare conn stmt-sql)]

    (statement/bind-value stmt :id row-id)
    (dofor [[k v] :pairs m]
           (statement/bind-value stmt k v))

    (php/-> (stmt :stmt) (execute))
    (php/-> (stmt :stmt) (rowCount))))


(comment
  (get-driver sqlite-conn)
  (drop-table! sqlite-conn "t1")
  (table-exists? sqlite-conn "t1")
  (table-exists? sqlite-conn "foo")
  (:pdo sqlite-conn)

  (table-exists? sqlite-conn "t1")
  (table-exists? sqlite-conn "t3")

  (pdo/exec sqlite-conn "CREATE table t1 (id integer primary key autoincrement, name varchr(10))")
  (statement/fetch (pdo/query sqlite-conn "SELECT * FROM sqlite_master WHERE type='table' AND name = 't1'"))
  (statement/fetch (pdo/query sqlite-conn "SELECT * FROM sqlite_master WHERE type='table' AND name = 't1'"))



  (create-table! sqlite-conn )
  (table-exists? sqlite-conn "foo")
  (def sqlite-conn (pdo/connect "sqlite:database.db"))




  ;; Requires PHP Sqlite3 extension included in sury.org Debian packages
  ;; php8.3-sqlite3 php8.4-sqlite3
  ;; see https://wiki.debian.org/AdditionalPHPVersions

  )

(comment
  ;; TODO Tests
  (is (thrown? \AssertionError (table-exists? sqlite-conn nil)))
  (is (thrown? \AssertionError (table-exists? nil nil)))
 )
